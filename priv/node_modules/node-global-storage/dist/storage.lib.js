"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOption = exports.isProtected = exports.flush = exports.unset = exports.isSet = exports.list = exports.set = exports.get = void 0;
/**
 * Core storage object
 */
const __storage = {};
/**
 * Default parameters
 */
const __options = {
    protected: false,
    force: false,
    onUpdate: undefined,
    onDelete: undefined,
    silent: false,
    extended: false,
};
/**
 * @name get
 * @description Stores data with a given key name and returns the stored value
 */
function get(key, options) {
    var _a;
    const record = __storage[key];
    const computedExtended = (_a = options === null || options === void 0 ? void 0 : options.extended) !== null && _a !== void 0 ? _a : __options.extended;
    return computedExtended ? record : record === null || record === void 0 ? void 0 : record.value;
}
exports.get = get;
/**
 * @name set
 * @description Returns the value of the provided key name
 */
function set(key, value, options) {
    var _a, _b, _c, _d, _e;
    const item = __storage[key] || {};
    const computedForced = (_a = options === null || options === void 0 ? void 0 : options.force) !== null && _a !== void 0 ? _a : __options.force;
    if ((item === null || item === void 0 ? void 0 : item.protected) && !computedForced) {
        return item.value;
    }
    const computedSilent = (_b = options === null || options === void 0 ? void 0 : options.silent) !== null && _b !== void 0 ? _b : __options.silent;
    if ((item === null || item === void 0 ? void 0 : item.onUpdate) && !computedSilent) {
        item.onUpdate(key, value, item.value);
    }
    item.key = key;
    item.value = value;
    item.protected = (_c = options === null || options === void 0 ? void 0 : options.protected) !== null && _c !== void 0 ? _c : __options.protected;
    item.onUpdate || (item.onUpdate = (_d = options === null || options === void 0 ? void 0 : options.onUpdate) !== null && _d !== void 0 ? _d : __options.onUpdate);
    item.onDelete || (item.onDelete = (_e = options === null || options === void 0 ? void 0 : options.onDelete) !== null && _e !== void 0 ? _e : __options.onDelete);
    const now = new Date();
    item.createdAt || (item.createdAt = now);
    item.updatedAt = now;
    __storage[key] = item;
    return value;
}
exports.set = set;
/**
 * @name list
 * @description Returns all stored data so far. If passed `{extended: true}`, returns also specific options for the given key
 */
function list(options) {
    var _a;
    const computedExtended = (_a = options === null || options === void 0 ? void 0 : options.extended) !== null && _a !== void 0 ? _a : __options.extended;
    if (computedExtended) {
        return __storage;
    }
    return Object.entries(__storage).reduce((memo, [key, storageItem]) => {
        memo[key] = storageItem.value;
        return memo;
    }, {});
}
exports.list = list;
/**
 * @name isSet
 * @description Checks if a key exists. If existed but already deleted, returns `false`.
 */
function isSet(key) {
    return __storage.hasOwnProperty(key);
}
exports.isSet = isSet;
/**
 * @name unset
 * @description Deletes the data stored with the given name
 */
function unset(key, options) {
    var _a;
    if (!isSet(key)) {
        return;
    }
    const value = __storage[key];
    const computedSilent = (_a = options === null || options === void 0 ? void 0 : options.silent) !== null && _a !== void 0 ? _a : __options.silent;
    if (!computedSilent && value.onDelete) {
        value.onDelete(key, value);
    }
    delete __storage[key];
}
exports.unset = unset;
/**
 * @name flush
 * @description Deletes all stored data
 */
function flush(options) {
    for (const key of Object.keys(__storage)) {
        unset(key, options);
    }
    return undefined;
}
exports.flush = flush;
/**
 * @name isProtected
 * @description Checks if a key was stored with protection (cannot delete except if `force: true` is specified).
 */
function isProtected(key) {
    if (!isSet(key)) {
        return false;
    }
    return Boolean(__storage[key].protected);
}
exports.isProtected = isProtected;
/**
 * @name default
 * @description Override default specific options for all transactions
 */
function defaultOption(key, value) {
    __options[key] = value;
}
exports.defaultOption = defaultOption;
